#!/bin/bash
# -*- sh-basic-offset:8 indent-tabs-mode: t -*-

if [ ! -f config.mak ]; then
	echo run ./configure first. See ./configure -h
	exit 2
fi
source config.mak
processor="$PROCESSOR"

# Default to using KVM if available and on the right ARM host
usingkvm=0
if [ -c /dev/kvm ]; then
	if [ "$HOST" = "arm" ] && [ "$ARCH" = "arm" ]; then
		usingkvm=1
	elif [ "$HOST" = "aarch64" ]; then
		usingkvm=1
	fi
fi

qemu="${QEMU:-qemu-system-$ARCH_NAME}"
qpath=$(which $qemu 2>/dev/null)

if [ -z "$qpath" ]; then
	echo $qemu not found.
	exit 2
fi

if ! $qemu -machine '?' 2>&1 | grep 'ARM Virtual Machine' > /dev/null; then
	echo "$qpath doesn't support mach-virt ('-machine virt'). Exiting."
	exit 2
fi

M='-machine virt'

if ! $qemu $M -device '?' 2>&1 | grep virtconsole > /dev/null; then
	echo "$qpath doesn't support virtio-console for chr-testdev. Exiting."
	exit 2
fi

if $qemu $M -chardev testdev,id=id -initrd . 2>&1 \
		| grep backend > /dev/null; then
	echo "$qpath doesn't support chr-testdev. Exiting."
	exit 2
fi

M='-machine virt'
if [ $usingkvm = 1 ]; then
	M+=",accel=kvm"
else
	echo "Running with TCG"
	M+=',accel=tcg'
fi

chr_testdev='-device virtio-serial-device'
chr_testdev+=' -device virtconsole,chardev=ctd -chardev testdev,id=ctd'

# arm64 must use '-cpu host' with kvm
if [ $usingkvm = 1 ] && [ "$ARCH" = "arm64" ]; then
	processor="host"
fi

command="$qemu $M -cpu $processor $chr_testdev"
command+=" -display none -serial stdio -kernel"

echo $command "$@"
$command "$@"
ret=$?
echo Return value from qemu: $ret
exit $ret
